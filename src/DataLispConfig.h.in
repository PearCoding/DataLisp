/*
 Copyright (c) 2014-2020, OEmercan Yazici <omercan AT pearcoding.eu>
 All rights reserved.

 Redistribution and use in source and binary forms, with or without modification,
 are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice,
       this list of conditions and the following disclaimer.

    2. Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.

    3. Neither the name of the copyright owner may be used
       to endorse or promote products derived from this software without
       specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER BE LIABLE FOR
 ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
*/
#pragma once

#define DL_STRINGIFY(str) #str
#define DL_DOUBLEQUOTE(str) DL_STRINGIFY(str)

// clang-format off
#define DL_NAME_STRING DL_DOUBLEQUOTE(${PROJECT_NAME})
#define DL_VENDOR_STRING DL_DOUBLEQUOTE(${VENDOR})

#define DL_VERSION_MAJOR ${DataLisp_VERSION_MAJOR}
#define DL_VERSION_MINOR ${DataLisp_VERSION_MINOR}
#define DL_VERSION_STRING "${DataLisp_VERSION}"
#define DL_VERSION_BUILD(major, minor) (((major) << 8) | (minor))
#define DL_VERSION DL_VERSION_BUILD(DL_VERSION_MAJOR, DL_VERSION_MINOR)
// clang-format on

//OS
#if defined(__linux) || defined(linux)
#define DL_OS_LINUX
#define DL_OS_NAME "Linux"
#elif defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__WINDOWS__) || defined(__TOS_WIN__)
#define DL_OS_WINDOWS
#if !defined(Win64) && !defined(_WIN64)
#define DL_OS_WINDOWS_32
#define DL_OS_NAME "Microsoft Windows 32 Bit"
#else
#define DL_OS_WINDOWS_64
#define DL_OS_NAME "Microsoft Windows 64 Bit"
#endif
#else
#define DL_OS_UNKNOWN
#define DL_OS_NAME "Unknown"
/*# error Your operating system is currently not supported*/
#endif

//Compiler
#if defined(__CYGWIN__)
#define DL_CC_CYGWIN
#define DL_CC_NAME "Cygwin"
#endif

#if defined(__GNUC__)
#define DL_CC_GNU
#define DL_CC_NAME "GNU C/C++"
#endif

#if defined(__MINGW32__)
#define DL_CC_MINGW32
#if !defined(DL_CC_GNU)
#define DL_CC_NAME "MinGW 32"
#else
#undef DL_CC_NAME
#define DL_CC_NAME "GNU C/C++(MinGW 32)"
#endif
#endif

#if defined(__INTEL_COMPILER)
#define DL_CC_INTEL
#ifdef DL_CC_NAME
#undef DL_CC_NAME
#endif
#define DL_CC_NAME "Intel C/C++"
#endif

#if defined(_MSC_VER)
#define DL_CC_MSC
#define DL_CC_NAME "Microsoft Visual C++"
#endif

#if !defined(DL_CC_NAME)
#define DL_CC_NAME "Unknown compiler"
#endif

#if defined(DL_DEBUG)
#define DL_BUILDVARIANT_NAME "Debug"
#define DL_BUILD_STRING DL_NAME_STRING " " DL_VERSION_STRING " build variant " DL_BUILDVARIANT_NAME " on " __DATE__ " at " __TIME__ " with " DL_CC_NAME " { OS: " DL_OS_NAME "; Last change: " __TIMESTAMP__ "}\n"
#else
#ifndef DL_RELEASE
#define DL_RELEASE
#endif
#define DL_BUILDVARIANT_NAME "Release"
#define DL_BUILD_STRING DL_NAME_STRING " " DL_VERSION_STRING " build variant " DL_BUILDVARIANT_NAME " { OS: " DL_OS_NAME " }\n"
#endif

#if !defined(DL_LIB_STATIC)
#if defined(DL_OS_WINDOWS) //Really OS dependent, more tool chain dependent!
#define DL_EXPORT_ __declspec(dllexport)
#define DL_IMPORT_ __declspec(dllimport)
#define DL_HIDDEN_
#elif defined(DL_OS_LINUX)
#define DL_EXPORT_ __attribute__((visibility("default")))
#define DL_IMPORT_
#define DL_HIDDEN_ __attribute__((visibility("hidden")))
#else
#error Unsupported operating system
#endif
#else
#define DL_EXPORT_
#define DL_IMPORT_
#define DL_HIDDEN_
#endif

#ifdef DL_LIB_BUILD
#define DL_LIB DL_EXPORT_
#define DL_INTERNAL_LIB DL_HIDDEN_
#ifdef DL_CC_MSC
#pragma warning(disable : 4251) //Just too annoying
#endif
#else
#define DL_LIB DL_IMPORT_
#define DL_INTERNAL_LIB "THIS SHOULDN'T BE VISIBLE TO THE USER"
#endif

#ifndef DL_NO_ASSERTS
#include <assert.h>
#define DL_ASSERT(cond) assert((cond))
#else
#define DL_ASSERT(cond)
#endif

#if defined(DL_DEBUG)
#define DL_DEBUG_ASSERT(cond) DL_ASSERT(cond)
#else
#define DL_DEBUG_ASSERT(cond) DL::dl_Noop()
#endif

#ifndef DL_STRING_TYPE
#include <string>
#define DL_STRING_TYPE std::string
#endif

#ifndef DL_VECTOR_TYPE
#include <vector>
#define DL_VECTOR_TYPE std::vector
#endif

#ifndef DL_MAP_TYPE
#include <map>
#define DL_MAP_TYPE std::map
#endif

/** @file DataLispConfig.h DL/DataLispConfig.h
 */

namespace DL {
inline void dl_Noop()
{
}

typedef int8_t int8;
typedef uint8_t uint8;

typedef int16_t int16;
typedef uint16_t uint16;

typedef int32_t int32;
typedef uint32_t uint32;

typedef int64_t int64;
typedef uint64_t uint64;

typedef DL_STRING_TYPE string_t;

typedef int64 Integer;
typedef float Float;

/// Wrapper to the used vector structure.
template <typename T>
using vector_t = DL_VECTOR_TYPE<T>;
/// Wrapper to the used map structure.
template <typename K, typename V>
using map_t = DL_MAP_TYPE<K, V>;

class Data;
class VM;
typedef Data (*expr_t)(const vector_t<Data>& args, VM& vm); ///< Expression Callback
} // namespace DL
